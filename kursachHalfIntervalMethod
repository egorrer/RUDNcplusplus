#include <iostream>
#include <math.h>
#define PI 3.14159265
using namespace std;

//Настроить периуд у Син и Кос надо!!!

float halfIntervalMethod(float (*fName)(float), float a, float b, float accLevel)
{
    float c, aVal, bVal, accVal;
    float searchZero(float (*fN)(float), float negPoint, float posPoint, float accL, int countVal);
    float fsin(float x);
    float fcos(float x);
    float ftg(float x);
    float fctg(float x);
    float farcsin(float x);
    float farccos(float x);
    float farctg(float x);
    float farcctg(float x);
    float foneDx(float x);
    float fsquareroot(float x);

// calculating the target function for two input variables
    aVal = (*fName)(a);
    bVal = (*fName)(b);

    if( aVal>0 && bVal<0 ) {  // check values' sign
        return searchZero(fName, b, a, accLevel, 1);
    } else if( aVal<0 && bVal>0 ) {
        return searchZero(fName, a, b, accLevel, 1);
    }
    else {
        cout << "Error: The arguments have the same sign";
        return 0;
    }

}

float searchZero(float (*fPointer)(float), float negPoint, float posPoint, float accL, int counter)
{
    float testValue, midPoint;
    bool closeEnought(float p, float q, float accLL);

    midPoint=(negPoint+posPoint)/2;
    if(closeEnought(negPoint, posPoint, accL)){
        return midPoint;
    }
// здесь работает указатель на функцию
    testValue = fPointer(midPoint);
    cout << "Step " << counter << ": negPoint = " << negPoint << ", posPoint = " << posPoint << ", midPoint = " << midPoint << "\n";
    counter++;
    if(testValue>0){
        return searchZero(fPointer, negPoint, midPoint, accL, counter);
    } else if(testValue<0){
        return searchZero(fPointer, midPoint, posPoint, accL, counter);
    }
    return midPoint;
}

bool closeEnought(float p, float q, float accLL){
    if(fabs(p - q) < accLL){
        return 1;
    }
    return 0;
}

float fcos(float x){
    return cos(x);
}

float fsin(float x){
    return sin(x);
}

float ftg(float x){
    return tan(x);
}

float fctg(float x){
    return 1/(tan(x));
}

float farccos(float x){
    return acos(x);
}

float farcsin(float x){
    return asin(x);
}

float farctg(float x){
    return atan(x);
}

float farcctg(float x){
    return (PI / 2) - atan(x);
}

float foneDx(float x) {
    return (1/x);
}

float fsquareroot(float x) {
    return sqrt(x);
}

// The list of functions can be continued...

int main()
{
    float x, y, z=1000; // input and output values
    float acc=0.001; // accuracy level
    std::string funcName; // function name
    float (*functionPointer)(float x); //function pointer
    float halfIntervalMethod(float (*fName)(float), float a, float b, float accLevel);

    cout << "Choose the function from the list:\n 1 - sin (sine)\n 2 - cos (cosine)\n 3 - tg (tangent)\n 4 - ctg (cotangent)\n";
    cout << " 5 - arcsin (arcsine)\n 6 - arccos (arccosine)\n 7 - arctg (arctangent)\n 8 - arcctg (arccotangent)\n";
    cout << " 9 - 1/x\n 10 - sqrt(x) (square root)\n";
    cin >> funcName;
    cout << "Enter two float numbers:";
    cin >> x >> y;
    cout << "Enter the accuracy level (0.01, 0.001, etc.):";
    cin >> acc;
    if ( acc <=0 || acc >= 1 ) {
        cout << "\n Invalid accuracy level \n";
        return 0;
    }
    if ( funcName == "sin" ) {
        functionPointer = fsin;
    } else if ( funcName == "cos" ) {
        functionPointer = fcos;
    } else {
        cout << "There is no such name in my list of functions\n" ;
        return 0;
    }

    z = halfIntervalMethod(functionPointer, x, y, acc);

    cout << "Output: " << z;
    return 0;
}

